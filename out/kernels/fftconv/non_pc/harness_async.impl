#define ONEAPI_BACKEND_LEVEL_ZERO_EXT
#define DPCT_PROFILING_ENABLED
#include <sycl/sycl.hpp>
#include <dpct/dpct.hpp>
#include <iostream>
#include <string>
#include <stdlib.h>
#include <bitset>

#include <fstream>
#include <cmath>

#include <sycl/ext/intel/math.hpp>

using namespace kittens;

#define N 1024
#define N1 32
#define B 16
#define H 16
#define TOTAL_INPUT_ELEMENTS B*H*N

#define CudaCheckError()    __cudaCheckError( __FILE__, __LINE__ )
inline void __cudaCheckError(const char *file, const int line) try {
    /*
    DPCT1010:604: SYCL uses exceptions to report errors and does not use the
    error codes. The cudaGetLastError function call was replaced with 0. You
    need to rewrite this code.
    */
    dpct::err0 err = 0;

    // More careful checking. However, this will affect performance.
    // Comment away if needed.
    err = DPCT_CHECK_ERROR(dpct::get_current_device().queues_wait_and_throw());
}
catch (sycl::exception const &exc) {
  std::cerr << exc.what() << "Exception caught at file:" << __FILE__
            << ", line:" << __LINE__ << std::endl;
  std::exit(1);
}

bool check_value(float abs_tol, float rel_tol, float *o, float *o_ref, int num_elements) {
    int diff_counter = 0;
    std::ofstream o_ref_file("./printouts/o_ref.txt");
    std::ofstream o_file("./printouts/o.txt");
    std::ofstream diff_file("./printouts/diff.txt");
    bool good = true;

    int num_nans = 0;
    int num_infs = 0;
    
    for (size_t i = 0; i < num_elements; i++) {
        float pred = o[i];
        float actual = o_ref[i];
        float diff = abs(pred - actual);
        bool has_nan = isnan(diff);
        bool has_inf = isinf(pred);
        if (has_nan) {
            num_nans += 1;
            good = false;
        }
        if (has_inf) {
            num_infs += 1;
            good = false;
        }
        if (1 ) { //i < 100000 ) {
            o_ref_file << o_ref[i] << ' ';
            o_file << o[i] << ' ';
            diff_file << diff << ' ';
            if ( i % 8 == 0) {
                o_ref_file << o_ref[i] << '\n';
                o_file << o[i] << '\n';
                diff_file << diff << '\n';
            }
        }
        if (diff > std::max(abs_tol, actual * rel_tol)) {
            diff_counter += 1;
            good = false;
        }
    }
    std::cout << diff_counter << " elements out of " << num_elements << " violate threshold" << std::endl;
    std::cout << num_nans << " elements out of " << num_elements << " have nans" << std::endl;
    std::cout << num_infs << " elements out of " << num_elements << " have infs" << std::endl;
    return good;
}

void loads(char *file, float* &o_ref, bf16* &d_u_real, bf16* &d_u_imag, bf16* &d_kf_real, bf16* &d_kf_imag, 
        bf16* &d_f_real, bf16* &d_f_imag, bf16* &d_finv_real, bf16* &d_finv_imag,
        bf16* &d_tw_real, bf16* &d_tw_imag, bf16* &d_twinv_real, bf16* &d_twinv_imag) {

    float *u_real = new float[TOTAL_INPUT_ELEMENTS];
    float *u_imag = new float[TOTAL_INPUT_ELEMENTS];
    float *kf_real = new float[H*N];
    float *kf_imag = new float[H*N];
    float *f_real = new float[N1*N1];
    float *f_imag = new float[N1*N1];
    float *finv_real = new float[N1*N1];
    float *finv_imag = new float[N1*N1];
    float *tw_real = new float[N1*N1];
    float *tw_imag = new float[N1*N1];
    float *twinv_real = new float[N1*N1];
    float *twinv_imag = new float[N1*N1];
    
    
    bf16 *u_real_bf = new bf16[TOTAL_INPUT_ELEMENTS];
    bf16 *u_imag_bf = new bf16[TOTAL_INPUT_ELEMENTS];
    bf16 *kf_real_bf = new bf16[H*N1*N1];
    bf16 *kf_imag_bf = new bf16[H*N1*N1];
    bf16 *f_real_bf = new bf16[N1*N1];
    bf16 *f_imag_bf = new bf16[N1*N1];
    bf16 *finv_real_bf = new bf16[N1*N1];
    bf16 *finv_imag_bf = new bf16[N1*N1];
    bf16 *tw_real_bf = new bf16[N1*N1];
    bf16 *tw_imag_bf = new bf16[N1*N1];
    bf16 *twinv_real_bf = new bf16[N1*N1];
    bf16 *twinv_imag_bf = new bf16[N1*N1];
    
    std::ifstream infile(file);
    std::cout << "Starting to enter!" << std::endl;

    for(int i = 0; i < TOTAL_INPUT_ELEMENTS; i++) infile >> u_real[i];
    for(int i = 0; i < TOTAL_INPUT_ELEMENTS; i++) infile >> u_imag[i];
    std::cout << "Finished loading U" << std::endl;
    for(int i = 0; i < H*N; i++) infile >> kf_real[i];
    for(int i = 0; i < H*N; i++) infile >> kf_imag[i];
    std::cout << "Finished loading Kf" << std::endl;
    for(int i = 0; i < N1*N1; i++) infile >> f_real[i];
    for(int i = 0; i < N1*N1; i++) infile >> f_imag[i];
    std::cout << "Finished loading F" << std::endl;
    for(int i = 0; i < N1*N1; i++) infile >> finv_real[i];
    for(int i = 0; i < N1*N1; i++) infile >> finv_imag[i];
    std::cout << "Finished loading Finv" << std::endl;
    for(int i = 0; i < N1*N1; i++) infile >> tw_real[i];
    for(int i = 0; i < N1*N1; i++) infile >> tw_imag[i];
    std::cout << "Finished loading tw" << std::endl;
    for(int i = 0; i < N1*N1; i++) infile >> twinv_real[i];
    for(int i = 0; i < N1*N1; i++) infile >> twinv_imag[i];
    std::cout << "Finished loading tw inv" << std::endl;
    for(int i = 0; i < TOTAL_INPUT_ELEMENTS; i++) infile >> o_ref[i];
    std::cout << "Finished loading O_REF" << std::endl;
    

    // Convert to bf16
    for (int i = 0; i < TOTAL_INPUT_ELEMENTS; i++) {
        u_real_bf[i] = sycl::ext::intel::math::float2bfloat16(u_real[i]);
    }
    for (int i = 0; i < TOTAL_INPUT_ELEMENTS; i++) {
        u_imag_bf[i] = sycl::ext::intel::math::float2bfloat16(u_imag[i]);
    }
    for (int i = 0; i < H * N; i++) {
        kf_real_bf[i] = sycl::ext::intel::math::float2bfloat16(kf_real[i]);
    }
    for (int i = 0; i < H * N; i++) {
        kf_imag_bf[i] = sycl::ext::intel::math::float2bfloat16(kf_imag[i]);
    }
    for(int i = 0; i < N1*N1; i++) {
        f_real_bf[i] = sycl::ext::intel::math::float2bfloat16(f_real[i]);
    }
    for (int i = 0; i < N1 * N1; i++) {
        f_imag_bf[i] = sycl::ext::intel::math::float2bfloat16(f_imag[i]);
    }
    for (int i = 0; i < N1 * N1; i++) {
        finv_real_bf[i] = sycl::ext::intel::math::float2bfloat16(finv_real[i]);
    }
    for (int i = 0; i < N1 * N1; i++) {
        finv_imag_bf[i] = sycl::ext::intel::math::float2bfloat16(finv_imag[i]);
    }
    for (int i = 0; i < N1 * N1; i++) {
        tw_real_bf[i] = sycl::ext::intel::math::float2bfloat16(tw_real[i]);
    }
    for (int i = 0; i < N1 * N1; i++) {
        tw_imag_bf[i] = sycl::ext::intel::math::float2bfloat16(tw_imag[i]);
    }
    for (int i = 0; i < N1 * N1; i++) {
        twinv_real_bf[i] =
            sycl::ext::intel::math::float2bfloat16(twinv_real[i]);
    }
    for (int i = 0; i < N1 * N1; i++) {
        twinv_imag_bf[i] =
            sycl::ext::intel::math::float2bfloat16(twinv_imag[i]);
    }

    d_u_real = sycl::malloc_device<bf16>(TOTAL_INPUT_ELEMENTS,
                                         dpct::get_in_order_queue());
    d_u_imag = sycl::malloc_device<bf16>(TOTAL_INPUT_ELEMENTS,
                                         dpct::get_in_order_queue());
    d_kf_real = sycl::malloc_device<bf16>(H * N, dpct::get_in_order_queue());
    d_kf_imag = sycl::malloc_device<bf16>(H * N, dpct::get_in_order_queue());
    d_f_real = sycl::malloc_device<bf16>(N1 * N1, dpct::get_in_order_queue());
    d_f_imag = sycl::malloc_device<bf16>(N1 * N1, dpct::get_in_order_queue());
    d_finv_real =
        sycl::malloc_device<bf16>(N1 * N1, dpct::get_in_order_queue());
    d_finv_imag =
        sycl::malloc_device<bf16>(N1 * N1, dpct::get_in_order_queue());
    d_tw_real = sycl::malloc_device<bf16>(N1 * N1, dpct::get_in_order_queue());
    d_tw_imag = sycl::malloc_device<bf16>(N1 * N1, dpct::get_in_order_queue());
    d_twinv_real =
        sycl::malloc_device<bf16>(N1 * N1, dpct::get_in_order_queue());
    d_twinv_imag =
        sycl::malloc_device<bf16>(N1 * N1, dpct::get_in_order_queue());

    dpct::get_in_order_queue().memcpy(d_u_real, u_real_bf,
                                      TOTAL_INPUT_ELEMENTS * sizeof(bf16));
    dpct::get_in_order_queue().memcpy(d_u_imag, u_imag_bf,
                                      TOTAL_INPUT_ELEMENTS * sizeof(bf16));
    dpct::get_in_order_queue().memcpy(d_kf_real, kf_real_bf,
                                      H * N * sizeof(bf16));
    dpct::get_in_order_queue().memcpy(d_kf_imag, kf_imag_bf,
                                      H * N * sizeof(bf16));
    dpct::get_in_order_queue().memcpy(d_f_real, f_real_bf,
                                      N1 * N1 * sizeof(bf16));
    dpct::get_in_order_queue().memcpy(d_f_imag, f_imag_bf,
                                      N1 * N1 * sizeof(bf16));
    dpct::get_in_order_queue().memcpy(d_finv_real, finv_real_bf,
                                      N1 * N1 * sizeof(bf16));
    dpct::get_in_order_queue().memcpy(d_finv_imag, finv_imag_bf,
                                      N1 * N1 * sizeof(bf16));
    dpct::get_in_order_queue().memcpy(d_tw_real, tw_real_bf,
                                      N1 * N1 * sizeof(bf16));
    dpct::get_in_order_queue().memcpy(d_tw_imag, tw_imag_bf,
                                      N1 * N1 * sizeof(bf16));
    dpct::get_in_order_queue().memcpy(d_twinv_real, twinv_real_bf,
                                      N1 * N1 * sizeof(bf16));
    dpct::get_in_order_queue()
        .memcpy(d_twinv_imag, twinv_imag_bf, N1 * N1 * sizeof(bf16))
        .wait();

    delete[] u_real, u_imag, kf_real, kf_imag, f_real, f_imag, 
            finv_real, finv_imag, tw_real, tw_imag, twinv_real, twinv_imag;
    delete[] u_real_bf, u_imag_bf, kf_real_bf, kf_imag_bf, f_real_bf, f_imag_bf, 
            finv_real_bf, finv_imag_bf, tw_real_bf, tw_imag_bf, twinv_real_bf, twinv_imag_bf;
}

int main(int argc, char **argv) {
    printf("Starting\n");
    //int TOTAL_INPUT_ELEMENTS = B * H * N;

    float *o_ref = new float[TOTAL_INPUT_ELEMENTS];
    float *o = new float[TOTAL_INPUT_ELEMENTS]; // On host after kernel
    bf16 *o_bf = new bf16[TOTAL_INPUT_ELEMENTS];

    bf16 *d_u_real, *d_u_imag, *d_kf_real, *d_kf_imag, 
    *d_f_real, *d_f_imag, *d_finv_real, *d_finv_imag, 
    *d_tw_real, *d_tw_imag, *d_twinv_real, *d_twinv_imag, *d_o;
    
    if(argc == 2) {
        d_o = sycl::malloc_device<bf16>(TOTAL_INPUT_ELEMENTS,
                                        dpct::get_in_order_queue());
        loads(argv[1], o_ref, d_u_real, d_u_imag, d_kf_real, d_kf_imag, 
        d_f_real, d_f_imag, d_finv_real, d_finv_imag,
        d_tw_real, d_tw_imag, d_twinv_real, d_twinv_imag);
    } else {
        exit(1);
    }

    // tk 2 changes
    constexpr int B_TILE = 8;
    constexpr int H_TILE = 8;
    using fft_t  = fftconv_template<B_TILE, H_TILE, H, N, N1>;
    using globals = typename fft_t::layout::globals;
    using fft_layout = typename fft_t::layout::fft_layout;
    using filt_layout = typename fft_t::layout::filter_layout;
    using input_layout = typename fft_t::layout::input_layout;
    
    using complex_input_layout = kittens::cgl<input_layout>;
    using complex_filter_layout = kittens::cgl<filt_layout>;
    using complex_fft_layout = kittens::cgl<fft_layout>;

    // input and output
    input_layout u_real_gl{d_u_real, B_TILE, nullptr, nullptr, nullptr};
    input_layout u_imag_gl{d_u_imag, B_TILE, nullptr, nullptr, nullptr};
    complex_input_layout u_gl{u_real_gl, u_imag_gl};

    input_layout o_gl{d_o, B_TILE, nullptr, nullptr, nullptr};

    // filters
    filt_layout kf_real_gl{d_kf_real, nullptr, nullptr, nullptr, nullptr};
    filt_layout kf_imag_gl{d_kf_imag, nullptr, nullptr, nullptr, nullptr};
    complex_filter_layout kf_gl{kf_real_gl, kf_imag_gl};
    
    // factors
    fft_layout f_real_gl{d_f_real, nullptr, nullptr, nullptr, nullptr};
    fft_layout f_imag_gl{d_f_imag, nullptr, nullptr, nullptr, nullptr};
    complex_fft_layout f_gl{f_real_gl, f_imag_gl};

    fft_layout tw_real_gl{d_tw_real, nullptr, nullptr, nullptr, nullptr};
    fft_layout tw_imag_gl{d_tw_imag, nullptr, nullptr, nullptr, nullptr};
    complex_fft_layout tw_gl{tw_real_gl, tw_imag_gl};

    fft_layout finv_real_gl{d_finv_real, nullptr, nullptr, nullptr, nullptr};
    fft_layout finv_imag_gl{d_finv_imag, nullptr, nullptr, nullptr, nullptr};
    complex_fft_layout finv_gl{finv_real_gl, finv_imag_gl};

    fft_layout twinv_real_gl{d_twinv_real, nullptr, nullptr, nullptr, nullptr};
    fft_layout twinv_imag_gl{d_twinv_imag, nullptr, nullptr, nullptr, nullptr};
    complex_fft_layout twinv_gl{twinv_real_gl, twinv_imag_gl};

    // b_global Bg{d_B, batch, ngroups, M, K};
    // c_global Cg{d_C, batch, ngroups*num_chunks, chunk_size, chunk_size};
    globals G{
        u_gl,
        o_gl,
        kf_gl,
        f_gl,
        finv_gl,
        tw_gl,
        twinv_gl
    };

    dpct::queue_ptr stream;
    stream = dpct::get_current_device().create_queue();
    for (int i = 0; i < 1; i ++) {
        std::cout << "Starting kernel\n";
        dpct::get_current_device().queues_wait_and_throw();
        const auto start = std::chrono::high_resolution_clock::now();
        launch_fftconv_tk<fft_t>(G, B, H);
        dpct::get_current_device().queues_wait_and_throw();
        const auto finish = std::chrono::high_resolution_clock::now();
        CudaCheckError();
        std::cout << "Finished kernel\n\n";
        std::cout << "Execution time: " << std::chrono::duration_cast<std::chrono::microseconds>(finish - start).count() << " us\n" << std::endl;
    }

    dpct::get_in_order_queue()
        .memcpy(o_bf, d_o, TOTAL_INPUT_ELEMENTS * sizeof(bf16))
        .wait();
    for (int i = 0; i < TOTAL_INPUT_ELEMENTS; i++) {
        o[i] = sycl::ext::intel::math::bfloat162float(o_bf[i]);
    }

    // Reduce criteria from 0.5 to 1 abs difference (we had 50 elements out of 262144 violate threshold,
    // all diffs were between 0.5 and 1)
    constexpr float abs_tol = 1.0e-1f;
    constexpr float rel_tol = 1.0e-1f;

    std::cout << "Total output elements: " << TOTAL_INPUT_ELEMENTS << std::endl;
    if (check_value(abs_tol, rel_tol, o, o_ref, TOTAL_INPUT_ELEMENTS)) {
        std::cout << "Correctness Test PASSED" << std::endl;
    } else {
        std::cout << "Correctness Test FAILED" << std::endl;
    }

    delete[] o_ref, o;
    delete[] o_bf;

    dpct::dpct_free(d_u_real, dpct::get_in_order_queue());
    dpct::dpct_free(d_u_imag, dpct::get_in_order_queue());
    dpct::dpct_free(d_kf_real, dpct::get_in_order_queue());
    dpct::dpct_free(d_kf_imag, dpct::get_in_order_queue());
    dpct::dpct_free(d_f_real, dpct::get_in_order_queue());
    dpct::dpct_free(d_f_imag, dpct::get_in_order_queue());
    dpct::dpct_free(d_finv_real, dpct::get_in_order_queue());
    dpct::dpct_free(d_finv_imag, dpct::get_in_order_queue());
    dpct::dpct_free(d_tw_real, dpct::get_in_order_queue());
    dpct::dpct_free(d_tw_imag, dpct::get_in_order_queue());
    dpct::dpct_free(d_twinv_real, dpct::get_in_order_queue());
    dpct::dpct_free(d_twinv_imag, dpct::get_in_order_queue());
    dpct::dpct_free(d_o, dpct::get_in_order_queue());
    dpct::get_current_device().destroy_queue(stream);

    return 0;
}