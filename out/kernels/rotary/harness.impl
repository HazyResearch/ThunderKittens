#define ONEAPI_BACKEND_LEVEL_ZERO_EXT
#define DPCT_PROFILING_ENABLED
#include <sycl/sycl.hpp>
#include <dpct/dpct.hpp>
#include <iostream>
#include <string>
#include <fstream>
#include <sycl/ext/intel/math.hpp>

#include <cmath>

#define ATTN_B 32
#define ATTN_N 2048
#define ATTN_H 16 // launches
#define ATTN_D 64 // make sure to change in the kernel rotary.cu as well
using rope_t = rotary_template<ATTN_D>;

const int ATTN_D_2 = ATTN_D / 2;

#define CudaCheckError()    __cudaCheckError( __FILE__, __LINE__ )
inline void __cudaCheckError(const char *file, const int line) try {
    /*
    DPCT1010:505: SYCL uses exceptions to report errors and does not use the
    error codes. The cudaGetLastError function call was replaced with 0. You
    need to rewrite this code.
    */
    dpct::err0 err = 0;

    // More careful checking. However, this will affect performance.
    // Comment away if needed.
    err = DPCT_CHECK_ERROR(dpct::get_current_device().queues_wait_and_throw());
}
catch (sycl::exception const &exc) {
  std::cerr << exc.what() << "Exception caught at file:" << __FILE__
            << ", line:" << __LINE__ << std::endl;
  std::exit(1);
}

// Function to calculate the number of floating-point operations
long long flops(int batch, int seqlen, int headdim, int nheads) {
    // feature map
    long long f = batch * static_cast<long long>(seqlen) * nheads * (headdim / 2);
    f += batch * static_cast<long long>(seqlen) * nheads * (headdim / 2);
    f += batch * static_cast<long long>(seqlen) * nheads * (headdim / 2);
    return f;
}

// Function to calculate the efficiency in teraflops
double efficiency(long long flop, double time) {
    // Convert flop to teraflops and time to milliseconds
    double tflops = flop / 1e12;
    double time_ms = time / 1e6;
    return tflops / time_ms;
}

int main(int argc, char **argv) {
    std::cout << "Entered main!" << std::endl;

    // create dummy variables that are the right size
    constexpr int TOTAL_ELEMENTS_X = ATTN_B*ATTN_H*ATTN_N*ATTN_D;
    constexpr int TOTAL_ELEMENTS_O = ATTN_B*ATTN_H*ATTN_N*ATTN_D;
    constexpr int TOTAL_UNIQUE_ELEMENTS_X = ATTN_N*ATTN_D;
    constexpr int TOTAL_UNIQUE_ELEMENTS_O = ATTN_N*ATTN_D;

    float *x = new float[TOTAL_UNIQUE_ELEMENTS_X];
    bf16 *x_bf = new bf16[TOTAL_ELEMENTS_X];

    float *o_ref = new float[TOTAL_UNIQUE_ELEMENTS_O];
    bf16 *o_bf = new bf16[TOTAL_ELEMENTS_O];
    float *o = new float[TOTAL_ELEMENTS_O];

    constexpr int TOTAL_ELEMENTS_COS_IN = ATTN_N*ATTN_D_2;
    float *cos_in = new float[TOTAL_ELEMENTS_COS_IN];
    bf16  *cos_in_bf = new bf16[TOTAL_ELEMENTS_COS_IN];
    float *sin_in = new float[TOTAL_ELEMENTS_COS_IN];
    bf16  *sin_in_bf = new bf16[TOTAL_ELEMENTS_COS_IN];

    // set the inputs
    if(argc > 1) {
        std::ifstream infile(argv[1]);
        printf("Loading from %s\n", argv[1]);
        std::cout << "Starting to enter!" << std::endl;
        for(int i = 0; i < TOTAL_UNIQUE_ELEMENTS_X; i++) {  
            infile >> x[i];   
            // if (i < 5)  { std::cout << x[i] << std::endl; } 
        }
        std::cout << "Finished loading X" << std::endl;
        for(int i = 0; i < TOTAL_UNIQUE_ELEMENTS_O; i++) {  
            infile >> o_ref[i];  
            // o_ref[i] = x[i];
            // if (i < 5)  { std::cout << o_ref[i] << std::endl; } 
        }
        std::cout << "Finished loading O_REF" << std::endl;

        for(int i = 0; i < TOTAL_ELEMENTS_COS_IN; i++) { 
            infile >> cos_in[i];   
            // if (i < 5)  { std::cout << cos_in[i] << std::endl; } 
        }
        std::cout << "Finished loading COS_IN" << std::endl;
        for(int i = 0; i < TOTAL_ELEMENTS_COS_IN; i++) {  
            infile >> sin_in[i];   
            // if (i < 50)  { std::cout << sin_in[i] << std::endl; } 
        }
        std::cout << "Finished loading SIN_IN" << std::endl;

        std::cout << "Finished loading file from " << argv[1] << "!" << std::endl;
    }

    // set the inputs
    for(int i = 0; i < TOTAL_ELEMENTS_X; i++) {
        x_bf[i] = sycl::ext::intel::math::float2bfloat16(
            x[i % TOTAL_UNIQUE_ELEMENTS_X]);
        // if (i < 5) { std::cout << x[i % TOTAL_UNIQUE_ELEMENTS_X] << std::endl; } 
    }
    for(int i = 0; i < TOTAL_ELEMENTS_COS_IN; i++) {
        cos_in_bf[i] = sycl::ext::intel::math::float2bfloat16(
            cos_in[i % TOTAL_ELEMENTS_COS_IN]);
        // if (i < 5) { std::cout << __bf/loat162float(cos_in_bf[i]) << std::endl; }
        sin_in_bf[i] = sycl::ext::intel::math::float2bfloat16(
            sin_in[i % TOTAL_ELEMENTS_COS_IN]);
    }

    bf16 *d_x, *d_o;
    d_x =
        sycl::malloc_device<bf16>(TOTAL_ELEMENTS_X, dpct::get_in_order_queue());
    d_o =
        sycl::malloc_device<bf16>(TOTAL_ELEMENTS_O, dpct::get_in_order_queue());
    dpct::get_in_order_queue().memcpy(d_x, x_bf,
                                      TOTAL_ELEMENTS_X * sizeof(bf16));
    dpct::get_in_order_queue()
        .memcpy(d_o, o_bf, TOTAL_ELEMENTS_O * sizeof(bf16))
        .wait();

    bf16 *d_cos_in, *d_sin_in;
    d_cos_in = sycl::malloc_device<bf16>(TOTAL_ELEMENTS_COS_IN,
                                         dpct::get_in_order_queue());
    d_sin_in = sycl::malloc_device<bf16>(TOTAL_ELEMENTS_COS_IN,
                                         dpct::get_in_order_queue());
    dpct::get_in_order_queue().memcpy(d_cos_in, cos_in_bf,
                                      TOTAL_ELEMENTS_COS_IN * sizeof(bf16));
    dpct::get_in_order_queue()
        .memcpy(d_sin_in, sin_in_bf, TOTAL_ELEMENTS_COS_IN * sizeof(bf16))
        .wait();

    dpct::get_current_device().queues_wait_and_throw();
    CudaCheckError();

    unsigned long mem_size = (MAX_SHARED_MEMORY-2048);
    std::cout << "Setting max block shared memory to " << mem_size << std::endl;
    using T = kittens::bf16;
    using H = kittens::bf16;
    /*
    DPCT1026:508: The call to cudaFuncSetAttribute was removed because SYCL
    currently does not support corresponding setting.
    */

    constexpr int BATCHES_PER_BLOCK = 4;
    rope_t::layout::seq_global Og{d_o, ATTN_B, ATTN_H, ATTN_N, nullptr};
    rope_t::layout::seq_global Xg{d_x, ATTN_B, ATTN_H, ATTN_N, nullptr};
    rope_t::layout::rope_global SINg{d_sin_in, nullptr, nullptr, ATTN_N, nullptr};
    rope_t::layout::rope_global COSg{d_cos_in, nullptr, nullptr, ATTN_N, nullptr};
    rope_t::layout::globals g{Og, Xg, SINg, COSg, BATCHES_PER_BLOCK};

    constexpr int ROWS_PER_BLOCK = rope_t::NUM_CONSUMER_WARPS * rope_t::layout::seq_tile::rows;
    dpct::dim3 grid((ATTN_N + ROWS_PER_BLOCK - 1) / ROWS_PER_BLOCK,
                    (ATTN_B + BATCHES_PER_BLOCK - 1) / BATCHES_PER_BLOCK);
    dpct::dim3 block(kittens::prototype::detail::NUM_THREADS_v<rope_t>);

    const int ITER = 1;
    dpct::get_current_device().queues_wait_and_throw();
    CudaCheckError();
    std::cout << "Starting kernel with grid of size " << grid.x << ", " << grid.y << "\n";
    const auto start = std::chrono::high_resolution_clock::now();
    for(int i = 0; i < ITER; i++) {
        /*
        DPCT1049:340: The work-group size passed to the SYCL kernel may exceed
        the limit. To get the device limit, query
        info::device::max_work_group_size. Adjust the work-group size if needed.
        */
        /*
        DPCT1129:339: The type "typename rotary_template<64>::layout::globals"
        is used in the SYCL kernel, but it is not device copyable. The
        sycl::is_device_copyable specialization has been added for this type.
        Please review the code.
        */
        auto exp_props = sycl::ext::oneapi::experimental::properties{
            sycl::ext::oneapi::experimental::use_root_sync};
        dpct::has_capability_or_fail(dpct::get_in_order_queue().get_device(),
                                     {sycl::aspect::fp16});

        dpct::get_in_order_queue().submit([&](sycl::handler &cgh) {
            sycl::local_accessor<uint8_t, 1> dpct_local_acc_ct1(
                sycl::range<1>(mem_size), cgh);

            cgh.depends_on(
                dpct::get_current_device().get_in_order_queues_last_events());

            cgh.parallel_for(
                sycl::nd_range<3>(grid * block, block), exp_props,
                [=](sycl::nd_item<3> item_ct1)
                    [[sycl::reqd_sub_group_size(32)]] {
                        kittens::prototype::lcsf::kernel<rope_t>(
                            g, dpct_local_acc_ct1
                                   .get_multi_ptr<sycl::access::decorated::no>()
                                   .get());
                    });
        });
    }
    dpct::get_current_device().queues_wait_and_throw();
    const auto finish = std::chrono::high_resolution_clock::now();
    CudaCheckError();
    std::cout << "Finished kernel\n";
    
    // check correctness
    dpct::get_in_order_queue()
        .memcpy(o_bf, d_o, TOTAL_ELEMENTS_O * sizeof(bf16))
        .wait();
    for (int i = 0; i < TOTAL_ELEMENTS_O; i++) {
        o[i] = sycl::ext::intel::math::bfloat162float(o_bf[i]);
    }
    bool good = true;
    std::ofstream o_ref_file("printouts/o_ref.txt");
    std::ofstream o_file("printouts/o.txt");
    std::ofstream diff_file("printouts/diff.txt");
    std::cout << "Total elements: " << TOTAL_ELEMENTS_O << std::endl;
    std::cout << "Total unique elements: " << TOTAL_UNIQUE_ELEMENTS_O << std::endl;
    for(int i = 0; i < TOTAL_ELEMENTS_O; i++) {
        float diff = o[i] - o_ref[i % TOTAL_UNIQUE_ELEMENTS_O];
        if(i < TOTAL_UNIQUE_ELEMENTS_O) {
            o_ref_file << o_ref[i % TOTAL_UNIQUE_ELEMENTS_O] << ' ';
            o_file << o[i] << ' ';
            diff_file << diff << ' ';
        }
        if(abs(diff) > 0.1 || isnan(diff)) {
            good = false;
        }
    }
    if(good) std::cout << "Correct out :)\n";
    else std::cout << "Incorrect out :(\n";
    std::cout << "Average execution time for " << ITER << " ITERS (Q and K): " << std::chrono::duration_cast<std::chrono::microseconds>(finish - start).count() << " us" << std::endl;

    // calculate efficiency
    long long f = flops(ATTN_B, ATTN_N, ATTN_D, ATTN_H);
    double e = efficiency(f, std::chrono::duration_cast<std::chrono::microseconds>(finish - start).count());
    std::cout << "FLOPS: " << f << std::endl;
    std::cout << "Efficiency: " << e << " TFLOPS" << std::endl;

    dpct::dpct_free(d_x, dpct::get_in_order_queue());
    dpct::dpct_free(d_sin_in, dpct::get_in_order_queue());
    dpct::dpct_free(d_cos_in, dpct::get_in_order_queue());
    dpct::dpct_free(d_o, dpct::get_in_order_queue());

    delete[] x, o, o_ref, x_bf, o_bf;
    delete[] sin_in, sin_in_bf, cos_in, cos_in_bf;
    return 0;
}