#include <iostream>
#include <string>
#include <fstream>

constexpr int ATTN_B = 16;
constexpr int ATTN_H = 16;

constexpr int ATTN_N     = 768; 
constexpr int ATTN_D     = 128; 
constexpr int BLOCK_SIZE = (32*NUM_WORKERS); 
constexpr int ITER       = 10; 

#define CudaCheckError()    __cudaCheckError( __FILE__, __LINE__ )
inline void __cudaCheckError( const char *file, const int line ) {
    cudaError err = cudaGetLastError();
    if ( cudaSuccess != err )
    {
        fprintf( stderr, "cudaCheckError() failed at %s:%i : %s\n",
                 file, line, cudaGetErrorString( err ) );
        exit( -1 );
    }
    // More careful checking. However, this will affect performance.
    // Comment away if needed.
    err = cudaDeviceSynchronize();
    if( cudaSuccess != err )
    {
        fprintf( stderr, "cudaCheckError() with sync failed at %s:%i : %s\n",
                 file, line, cudaGetErrorString( err ) );
        exit( -1 );
    }
}

// Function to calculate the number of floating-point operations
long long flops(int batch, int seqlen, int headdim, int nheads, bool causal, const std::string& mode) {
    assert(mode == "fwd" || mode == "bwd" || mode == "fwd_bwd");
    long long f = 4 * batch * static_cast<long long>(seqlen) * seqlen * nheads * headdim;
    f /= (causal ? 2 : 1);

    if (mode == "fwd") {
        return f;
    } else if (mode == "bwd") {
        return static_cast<long long>(2.5 * f);
    } else { // fwd_bwd
        return static_cast<long long>(3.5 * f);
    }
}

// Function to calculate the efficiency in teraflops
double efficiency(long long flop, double time) {
    // Convert flop to teraflops and time to milliseconds
    double tflops = flop / 1e12;
    double time_ms = time / 1e6;
    return tflops / time_ms;
}

int main(int argc, char **argv) {
    // TODO: consider doing sequential kernel launches to force batches dimension element to execute sequentially,
    // which may increase the probability of L2 cache hits on KV

    std::cout << "Entered main!" << std::endl;

    // create dummy variables that are the right size
    constexpr int TOTAL_ELEMENTS_QKV = ATTN_B*ATTN_H*ATTN_N*ATTN_D;
    constexpr int TOTAL_ELEMENTS_B   = ATTN_B*ATTN_H*ATTN_N*ATTN_N; 

    constexpr int TOTAL_UNIQUE_ELEMENTS_QKV = ATTN_N*ATTN_D;
    constexpr int TOTAL_UNIQUE_ELEMENST_B   = ATTN_N*ATTN_N;

    // to load from file
    float *q      = new float[TOTAL_UNIQUE_ELEMENTS_QKV];
    float *k      = new float[TOTAL_UNIQUE_ELEMENTS_QKV];
    float *v      = new float[TOTAL_UNIQUE_ELEMENTS_QKV];
    float *b      = new float[TOTAL_UNIQUE_ELEMENST_B];
    float *o_ref  = new float[TOTAL_UNIQUE_ELEMENTS_QKV];

    // to pass to kernel
    bf16  *q_bf = new bf16[TOTAL_ELEMENTS_QKV];
    bf16  *k_bf = new bf16[TOTAL_ELEMENTS_QKV];
    bf16  *v_bf = new bf16[TOTAL_ELEMENTS_QKV];
    bf16  *b_bf = new bf16[TOTAL_ELEMENTS_B];
    bf16  *o_bf = new bf16[TOTAL_ELEMENTS_QKV];

    // kernel outputs
    float *kernel_out = new float[TOTAL_ELEMENTS_QKV];

    std::ifstream infile(argv[1]);

    std::cout << "Starting to enter!" << std::endl;

    for(int i = 0; i < TOTAL_ELEMENTS_QKV; i++) infile >> q[i];
    std::cout << "Finished loading Q" << std::endl;
    for(int i = 0; i < TOTAL_ELEMENTS_QKV; i++) infile >> k[i];
    std::cout << "Finished loading K" << std::endl;
    for(int i = 0; i < TOTAL_ELEMENTS_QKV; i++) infile >> v[i];
    std::cout << "Finished loading V" << std::endl;
    for(int i = 0; i < TOTAL_ELEMENTS_B; i++) infile >> b[i];
    std::cout << "Finished loading B" << std::endl;
    for(int i = 0; i < TOTAL_ELEMENTS_QKV; i++) infile >> o_ref[i];
    std::cout << "Finished loading O" << std::endl;

    std::cout << "Finished loading file from " << argv[1] << "!" << std::endl;

    // replicate into heads
    // replicate into batch
    for(int i = 0; i < TOTAL_ELEMENTS_QKV; i++) {
        q_bf[i] = __float2bfloat16(q[i % TOTAL_UNIQUE_ELEMENTS_QKV]);
        k_bf[i] = __float2bfloat16(k[i % TOTAL_UNIQUE_ELEMENTS_QKV]);
        v_bf[i] = __float2bfloat16(v[i % TOTAL_UNIQUE_ELEMENTS_QKV]);
    }
    for (int i = 0; i < TOTAL_ELEMENTS_B; i++) {
        b_bf[i] = __float2bfloat16(b[i % TOTAL_UNIQUE_ELEMENST_B]);
    }

    bf16 *d_q, *d_k, *d_v, *d_b, *d_o;

    cudaMalloc(&d_q, TOTAL_ELEMENTS_QKV * sizeof(bf16));
    cudaMalloc(&d_k, TOTAL_ELEMENTS_QKV * sizeof(bf16));
    cudaMalloc(&d_v, TOTAL_ELEMENTS_QKV * sizeof(bf16));
    cudaMalloc(&d_b, TOTAL_ELEMENTS_B * sizeof(bf16));
    cudaMalloc(&d_o, TOTAL_ELEMENTS_QKV * sizeof(bf16));

    cudaMemcpy(d_q, q_bf, TOTAL_ELEMENTS_QKV * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_k, k_bf, TOTAL_ELEMENTS_QKV * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_v, v_bf, TOTAL_ELEMENTS_QKV * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b_bf, TOTAL_ELEMENTS_B   * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_o, o_bf, TOTAL_ELEMENTS_QKV * sizeof(bf16), cudaMemcpyHostToDevice);

    CUtensorMap* tma_q_d = tma::allocate_and_create_tensor_map<st_bf<fwd_attend_ker_tile_dims<ATTN_D>::qo_height, fwd_attend_ker_tile_dims<ATTN_D>::tile_width> >(d_q, ATTN_B*ATTN_H*ATTN_N/(fwd_attend_ker_tile_dims<ATTN_D>::qo_height * 16));
    CUtensorMap* tma_k_d = tma::allocate_and_create_tensor_map<st_bf<fwd_attend_ker_tile_dims<ATTN_D>::kv_height, fwd_attend_ker_tile_dims<ATTN_D>::tile_width> >(d_k, ATTN_B*ATTN_H*ATTN_N/(fwd_attend_ker_tile_dims<ATTN_D>::kv_height * 16));
    CUtensorMap* tma_v_d = tma::allocate_and_create_tensor_map<st_bf<fwd_attend_ker_tile_dims<ATTN_D>::kv_height, fwd_attend_ker_tile_dims<ATTN_D>::tile_width> >(d_v, ATTN_B*ATTN_H*ATTN_N/(fwd_attend_ker_tile_dims<ATTN_D>::kv_height * 16));

    CUtensorMap* tma_b_d = tma::allocate_and_create_tensor_map<st_bf<fwd_attend_ker_tile_dims<ATTN_D>::qo_height, fwd_attend_ker_tile_dims<ATTN_D>::kv_height>  >(d_b, ATTN_B*ATTN_H*ATTN_N/(fwd_attend_ker_tile_dims<ATTN_D>::qo_height * 16), ATTN_N/(fwd_attend_ker_tile_dims<ATTN_D>::kv_height * 16));

    CUtensorMap* tma_o_d = tma::allocate_and_create_tensor_map<st_bf<fwd_attend_ker_tile_dims<ATTN_D>::qo_height, fwd_attend_ker_tile_dims<ATTN_D>::tile_width> >(d_o, ATTN_B*ATTN_H*ATTN_N/(fwd_attend_ker_tile_dims<ATTN_D>::qo_height * 16));

    std::cout << "Allocated and set memory on GPU!" << std::endl;
    
    unsigned long mem_size = kittens::MAX_SHARED_MEMORY; // need to launch two blocks if possible.
    
    cudaFuncSetAttribute(
        triangle_attention<ATTN_D>,
        cudaFuncAttributeMaxDynamicSharedMemorySize,
        mem_size
    );
    std::cout << "Set max dynamic memory!" << std::endl;

    dim3 grid(ATTN_N/(CONSUMER_WARPGROUPS*kittens::TILE_DIM*4), ATTN_B*ATTN_H, 1);
    static_assert(ATTN_N % (CONSUMER_WARPGROUPS*kittens::TILE_DIM*4) == 0);
    
    cudaDeviceSynchronize();
    
    std::cout << "Starting warmup" << std::endl;
    for(int i = 0; i < ITER; i++) {    
        triangle_attention<ATTN_D><<<grid, BLOCK_SIZE, mem_size>>>(ATTN_N, tma_q_d, tma_k_d, tma_v_d, tma_b_d, tma_o_d);
    }
    
    cudaDeviceSynchronize();

    std::cout << "Starting kernel" << std::endl;
    const auto start = std::chrono::high_resolution_clock::now();
    for(int i = 0; i < ITER; i++) {
        triangle_attention<ATTN_D><<<grid, BLOCK_SIZE, mem_size>>>(ATTN_N, tma_q_d, tma_k_d, tma_v_d, tma_b_d, tma_o_d);
    }

    cudaDeviceSynchronize();

    const auto finish = std::chrono::high_resolution_clock::now();
    CudaCheckError();
    std::cout << "Finished kernel\n";
    
    // check correctness
    cudaMemcpy(o_bf, d_o, TOTAL_ELEMENTS_QKV * sizeof(bf16), cudaMemcpyDeviceToHost);
    for(int i = 0; i < TOTAL_ELEMENTS_QKV; i++) {
        kernel_out[i] = __bfloat162float(o_bf[i]);
    }

    bool good = true;
    std::ofstream o_ref_file("printouts/o_ref.txt");
    std::ofstream o_file("printouts/o.txt");
    std::ofstream diff_file("printouts/o_diff.txt");

    float total_diff = 0;
    for (int i = 0; i < TOTAL_ELEMENTS_QKV; i++) {
        float diff = kernel_out[i] - o_ref[i % TOTAL_UNIQUE_ELEMENTS_QKV];
        if (i < TOTAL_UNIQUE_ELEMENTS_QKV) {
            o_ref_file << o_ref[i] << ' ';
            o_file << kernel_out[i] << ' ';
            diff_file << diff << ' ';
        }
        if (abs(diff) > 0.01 || isnan(diff)) {
            good = false;
        }
        total_diff += abs(diff);
    }

    // print average difference
    std::cout << "Average o difference: " << total_diff / TOTAL_ELEMENTS_QKV << std::endl;
    if (abs(total_diff / TOTAL_ELEMENTS_QKV) < 1e-3) {
        good = true;
    }

    std::cout << "Average fwd execution time: " << std::chrono::duration_cast<std::chrono::microseconds>(finish - start).count() / ITER << " us" << std::endl;
    if(good) std::cout << "FWD Correct :)\n";
    else std::cout << "FWD Incorrect :(\n";

    // calculate efficiency
    // long long f = flops(ATTN_B, ATTN_N, ATTN_D, QO_HEADS, false, "fwd");
    // double e = efficiency(f, std::chrono::duration_cast<std::chrono::microseconds>(finish - start).count() / ITER);
    // std::cout << "Efficiency: " << e << " TFLOPS\n\n\n" << std::endl;

    cudaFree(d_q);
    cudaFree(d_k);
    cudaFree(d_v);
    cudaFree(d_b);
    cudaFree(d_o);

    delete[] q, k, v, b, o_ref;
    delete[] q_bf, k_bf, v_bf, o_bf;

    delete[] kernel_out;

    return 0;
}
